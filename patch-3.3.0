diff --git a/python/google/protobuf/descriptor.py b/python/google/protobuf/descriptor.py
index e1f2e3b..04b3f10 100755
--- a/python/google/protobuf/descriptor.py
+++ b/python/google/protobuf/descriptor.py
@@ -703,6 +703,11 @@ class ServiceDescriptor(_NestedDescriptorBase):
     full_name: (str) Full name of the service, including package name.
     index: (int) 0-indexed index giving the order that this services
       definition appears withing the .proto file.
+    events: (list of EventDescriptor) List of event provided by this 
+      service.
+    events_by_name: (dict str -> EventDescriptor) Same EventDescriptor
+      objects as in |events_by_name|, but indexed by "name" attribute in each
+      EventDescriptor.
     methods: (list of MethodDescriptor) List of methods provided by this
       service.
     methods_by_name: (dict str -> MethodDescriptor) Same MethodDescriptor
@@ -716,24 +721,30 @@ class ServiceDescriptor(_NestedDescriptorBase):
   if _USE_C_DESCRIPTORS:
     _C_DESCRIPTOR_CLASS = _message.ServiceDescriptor
 
-    def __new__(cls, name, full_name, index, methods, options=None, file=None,  # pylint: disable=redefined-builtin
+    def __new__(cls, name, full_name, index, events, methods, options=None, file=None,  # pylint: disable=redefined-builtin
                 serialized_start=None, serialized_end=None):
       _message.Message._CheckCalledFromGeneratedFile()  # pylint: disable=protected-access
       return _message.default_pool.FindServiceByName(full_name)
 
-  def __init__(self, name, full_name, index, methods, options=None, file=None,
+  def __init__(self, name, full_name, index, events, methods, options=None, file=None,
                serialized_start=None, serialized_end=None):
     super(ServiceDescriptor, self).__init__(
         options, 'ServiceOptions', name, full_name, file,
         None, serialized_start=serialized_start,
         serialized_end=serialized_end)
     self.index = index
+    self.events = events
+    self.events_by_name = dict((m.name, m) for m in events)
     self.methods = methods
     self.methods_by_name = dict((m.name, m) for m in methods)
     # Set the containing service for each method in this service.
     for method in self.methods:
       method.containing_service = self
 
+  def FindEventByName(self, name):
+    """Searches for the specified event, and returns its descriptor."""
+    return self.events_by_name.get(name, None)
+
   def FindMethodByName(self, name):
     """Searches for the specified method, and returns its descriptor."""
     return self.methods_by_name.get(name, None)
@@ -748,6 +759,40 @@ class ServiceDescriptor(_NestedDescriptorBase):
     super(ServiceDescriptor, self).CopyToProto(proto)
 
 
+class EventDescriptor(DescriptorBase):
+  """Descriptor for a event in a service.
+
+  name: (str) Name of the event within the service.
+  full_name: (str) Full name of event.
+  index: (int) 0-indexed index of the event inside the service.
+  containing_service: (ServiceDescriptor) The service that contains this
+    event.
+  event_type: The descriptor of the message that this event accepts.
+  options: (descriptor_pb2.EventOptions) Event options message or
+    None to use default event options.
+  """
+  if _USE_C_DESCRIPTORS:
+    _C_DESCRIPTOE_CLASS = _message.EventDescriptor
+
+    def __new__(cls, name, full_name, index, containing_service,
+                event_type, in_server, options=None):
+      _message.Message._CheckCalledFormGeneratedFile() # pylint: disable=protocted-access
+      return _message.default_pool.FindEventByName(full_name)
+  def __init__(self, name, full_name, index, containing_service,
+               event_type, in_server, options=None):
+    """The arguments are as described in the description of EventDescriptor
+    attributes above.
+
+    Note that containing_service may be None, and may be set later if necessary.
+    """
+    super(EventDescriptor, self).__init__(options, 'EventOptions')
+    self.name = name
+    self.full_name = full_name
+    self.index = index
+    self.containing_service = containing_service
+    self.event_type = event_type
+    self.in_server = in_server
+
 class MethodDescriptor(DescriptorBase):
 
   """Descriptor for a method in a service.
diff --git a/python/google/protobuf/service_reflection.py b/python/google/protobuf/service_reflection.py
index 1c3636a..97f29b4 100755
--- a/python/google/protobuf/service_reflection.py
+++ b/python/google/protobuf/service_reflection.py
@@ -150,6 +150,8 @@ class _ServiceBuilder(object):
     cls.GetDescriptor.__doc__ = "Returns the service descriptor."
     cls.GetRequestClass = self._GetRequestClass
     cls.GetResponseClass = self._GetResponseClass
+    for event in self.descriptor.events:
+      setaddr(cls, event.name, 1);
     for method in self.descriptor.methods:
       setattr(cls, method.name, self._GenerateNonImplementedMethod(method))
 
diff --git a/src/google/protobuf/compiler/parser.cc b/src/google/protobuf/compiler/parser.cc
index 1a40956..07f6bb7 100644
--- a/src/google/protobuf/compiler/parser.cc
+++ b/src/google/protobuf/compiler/parser.cc
@@ -1845,11 +1845,68 @@ bool Parser::ParseServiceStatement(ServiceDescriptorProto* service,
         service_location, ServiceDescriptorProto::kOptionsFieldNumber);
     return ParseOption(service->mutable_options(), location,
                        containing_file, OPTION_STATEMENT);
-  } else {
+  } else if (LookingAt("rpc")) {
     LocationRecorder location(service_location,
         ServiceDescriptorProto::kMethodFieldNumber, service->method_size());
     return ParseServiceMethod(service->add_method(), location, containing_file);
+  } else if (LookingAt("event")) {
+    LocationRecorder location(service_location,
+        ServiceDescriptorProto::kEventFieldNumber, service->event_size());
+    return ParseServiceEvent(service->add_event(), location, containing_file);
+  }
+  return true;
+}
+
+bool Parser::ParseServiceEvent(EventDescriptorProto* event,
+                               const LocationRecorder& event_location,
+                               const FileDescriptorProto* containing_file) {
+  DO(Consume("event"));
+
+  {
+    LocationRecorder location(event_location,
+                              EventDescriptorProto::kNameFieldNumber);
+    location.RecordLegacyLocation(
+        event, DescriptorPool::ErrorCollector::NAME);
+    DO(ConsumeIdentifier(event->mutable_name(), "Expected event name."));
+  }
+
+  if (LookingAt("out")) {
+    LocationRecorder location(
+      event_location, EventDescriptorProto::kInServerFieldNumber);
+    location.RecordLegacyLocation(
+      event, DescriptorPool::ErrorCollector::OTHER);
+    event->set_in_server(false);
+    DO(Consume("out"));
+  } else if (LookingAt("in")){
+    LocationRecorder location(
+      event_location, EventDescriptorProto::kInServerFieldNumber);
+    location.RecordLegacyLocation(
+      event, DescriptorPool::ErrorCollector::OTHER);
+    event->set_in_server(true);
+    DO(Consume("in"));
   }
+
+  // Parse input type.
+  DO(Consume("("));
+  {
+    if (LookingAt("stream")) {
+      LocationRecorder location(
+          event_location, EventDescriptorProto::kStreamingFieldNumber);
+      location.RecordLegacyLocation(
+          event, DescriptorPool::ErrorCollector::OTHER);
+      event->set_streaming(true);
+      DO(Consume("stream"));
+
+    }
+    LocationRecorder location(event_location,
+                              EventDescriptorProto::kEventTypeFieldNumber);
+    location.RecordLegacyLocation(
+        event, DescriptorPool::ErrorCollector::INPUT_TYPE);
+    DO(ParseUserDefinedType(event->mutable_event_type()));
+  }
+  DO(Consume(")"));
+
+  return true;
 }
 
 bool Parser::ParseServiceMethod(MethodDescriptorProto* method,
@@ -1914,7 +1971,6 @@ bool Parser::ParseServiceMethod(MethodDescriptorProto* method,
   } else {
     DO(ConsumeEndOfDeclaration(";", &method_location));
   }
-
   return true;
 }
 
diff --git a/src/google/protobuf/compiler/parser.h b/src/google/protobuf/compiler/parser.h
index dd8b658..765c172 100644
--- a/src/google/protobuf/compiler/parser.h
+++ b/src/google/protobuf/compiler/parser.h
@@ -407,6 +407,10 @@ class LIBPROTOBUF_EXPORT Parser {
                           const LocationRecorder& method_location,
                           const FileDescriptorProto* containing_file);
 
+  // Parse options of a event
+  bool ParseServiceEvent(EventDescriptorProto* event,
+                         const LocationRecorder& method_location,
+                         const FileDescriptorProto* containing_file);
 
   // Parse options of a single method or stream.
   bool ParseMethodOptions(const LocationRecorder& parent_location,
diff --git a/src/google/protobuf/descriptor.cc b/src/google/protobuf/descriptor.cc
index 6a80792..f40793f 100644
--- a/src/google/protobuf/descriptor.cc
+++ b/src/google/protobuf/descriptor.cc
@@ -81,6 +81,7 @@ struct Symbol {
     ENUM,
     ENUM_VALUE,
     SERVICE,
+    EVENT,
     METHOD,
     PACKAGE
   };
@@ -92,6 +93,7 @@ struct Symbol {
     const EnumDescriptor* enum_descriptor;
     const EnumValueDescriptor* enum_value_descriptor;
     const ServiceDescriptor* service_descriptor;
+    const EventDescriptor* event_descriptor;
     const MethodDescriptor* method_descriptor;
     const FileDescriptor* package_file_descriptor;
   };
@@ -116,6 +118,7 @@ struct Symbol {
   CONSTRUCTOR(EnumDescriptor, ENUM, enum_descriptor)
   CONSTRUCTOR(EnumValueDescriptor, ENUM_VALUE, enum_value_descriptor)
   CONSTRUCTOR(ServiceDescriptor, SERVICE, service_descriptor)
+  CONSTRUCTOR(EventDescriptor, EVENT, event_descriptor)
   CONSTRUCTOR(MethodDescriptor, METHOD, method_descriptor)
   CONSTRUCTOR(FileDescriptor, PACKAGE, package_file_descriptor)
 #undef CONSTRUCTOR
@@ -136,6 +139,8 @@ struct Symbol {
         return enum_value_descriptor->type()->file();
       case SERVICE:
         return service_descriptor->file();
+      case EVENT:
+        return event_descriptor->service()->file();
       case METHOD:
         return method_descriptor->service()->file();
       case PACKAGE:
@@ -1410,6 +1415,12 @@ const ServiceDescriptor* DescriptorPool::FindServiceByName(
   return (result.type == Symbol::SERVICE) ? result.service_descriptor : NULL;
 }
 
+const EventDescriptor* DescriptorPool::FindEventByName(
+    const string& name) const {
+  Symbol result = tables_->FindByNameHelper(this, name);
+  return (result.type == Symbol::EVENT) ? result.event_descriptor : NULL;
+}
+
 const MethodDescriptor* DescriptorPool::FindMethodByName(
     const string& name) const {
   Symbol result = tables_->FindByNameHelper(this, name);
@@ -1613,6 +1624,17 @@ EnumDescriptor::FindValueByNumberCreatingIfUnknown(int key) const {
   return file()->tables_->FindEnumValueByNumberCreatingIfUnknown(this, key);
 }
 
+const EventDescriptor*
+ServiceDescriptor::FindEventByName(const string& key) const {
+  Symbol result =
+    file()->tables_->FindNestedSymbolOfType(this, key, Symbol::EVENT);
+  if (!result.IsNull()) {
+    return result.event_descriptor;
+  } else {
+    return NULL;
+  }
+}
+
 const MethodDescriptor*
 ServiceDescriptor::FindMethodByName(const string& key) const {
   Symbol result =
@@ -2076,6 +2098,10 @@ void EnumValueDescriptor::CopyTo(EnumValueDescriptorProto* proto) const {
 void ServiceDescriptor::CopyTo(ServiceDescriptorProto* proto) const {
   proto->set_name(name());
 
+  for (int i = 0; i < event_count(); i++) {
+    event(i)->CopyTo(proto->add_event());
+  }
+
   for (int i = 0; i < method_count(); i++) {
     method(i)->CopyTo(proto->add_method());
   }
@@ -2085,6 +2111,25 @@ void ServiceDescriptor::CopyTo(ServiceDescriptorProto* proto) const {
   }
 }
 
+void EventDescriptor::CopyTo(EventDescriptorProto* proto) const {
+  proto->set_name(name());
+
+  if (!event_type()->is_unqualified_placeholder_) {
+    proto->set_event_type(".");
+  }
+  proto->mutable_event_type()->append(event_type()->full_name());
+
+  if (&options() != &EventOptions::default_instance()) {
+    proto->mutable_options()->CopyFrom(options());
+  }
+
+  proto->set_in_server(in_server_);
+
+  if (streaming_) {
+    proto->set_streaming(true);
+  }
+}
+
 void MethodDescriptor::CopyTo(MethodDescriptorProto* proto) const {
   proto->set_name(name());
 
@@ -2752,6 +2797,10 @@ void ServiceDescriptor::DebugString(string *contents,
 
   FormatLineOptions(1, options(), file()->pool(), contents);
 
+  for (int i = 0; i < event_count(); i++) {
+    event(i)->DebugString(1, contents, debug_string_options);
+  }
+
   for (int i = 0; i < method_count(); i++) {
     method(i)->DebugString(1, contents, debug_string_options);
   }
@@ -2761,6 +2810,43 @@ void ServiceDescriptor::DebugString(string *contents,
   comment_printer.AddPostComment(contents);
 }
 
+string EventDescriptor::DebugString() const {
+    DebugStringOptions options; // default values
+    return DebugStringWithOptions(options);
+}
+
+string EventDescriptor::DebugStringWithOptions(
+    const DebugStringOptions& options) const {
+  string contents;
+  DebugString(0, &contents, options);
+  return contents;
+}
+
+void EventDescriptor::DebugString(int depth, string *contents,
+                                  const DebugStringOptions&
+                                  debug_string_options) const {
+  string prefix(depth * 2, ' ');
+  ++depth;
+  SourceLocationCommentPrinter
+    comment_printer(this, prefix, debug_string_options);
+  comment_printer.AddPreComment(contents);
+
+  strings::SubstituteAndAppend(contents, "$0event $1 $2 ($3)",
+                               prefix, name(),
+                               in_server() ? "in" : "out", event_type());
+
+  string formatted_options;
+  if (FormatLineOptions(depth, options(), service()->file()->pool(),
+                        &formatted_options)) {
+    strings::SubstituteAndAppend(contents, " {\n$0$1}\n",
+                                 formatted_options, prefix);
+  } else {
+    contents->append(";\n");
+  }
+
+  comment_printer.AddPostComment(contents);
+}
+
 string MethodDescriptor::DebugString() const {
   DebugStringOptions options;  // default values
   return DebugStringWithOptions(options);
@@ -2868,6 +2954,12 @@ bool EnumDescriptor::GetSourceLocation(SourceLocation* out_location) const {
   return file()->GetSourceLocation(path, out_location);
 }
 
+bool EventDescriptor::GetSourceLocation(SourceLocation* out_location) const {
+  std::vector<int> path;
+  GetLocationPath(&path);
+  return service()->file()->GetSourceLocation(path, out_location);
+}
+
 bool MethodDescriptor::GetSourceLocation(SourceLocation* out_location) const {
   std::vector<int> path;
   GetLocationPath(&path);
@@ -2943,6 +3035,12 @@ void ServiceDescriptor::GetLocationPath(std::vector<int>* output) const {
   output->push_back(index());
 }
 
+void EventDescriptor::GetLocationPath(std::vector<int>* output) const {
+  service()->GetLocationPath(output);
+  output->push_back(ServiceDescriptorProto::kEventFieldNumber);
+  output->push_back(index());
+}
+
 void MethodDescriptor::GetLocationPath(std::vector<int>* output) const {
   service()->GetLocationPath(output);
   output->push_back(ServiceDescriptorProto::kMethodFieldNumber);
@@ -3187,6 +3285,9 @@ class DescriptorBuilder {
   void BuildService(const ServiceDescriptorProto& proto,
                     const void* dummy,
                     ServiceDescriptor* result);
+  void BuildEvent(const EventDescriptorProto& proto,
+                  const ServiceDescriptor* parent,
+                  EventDescriptor* result);
   void BuildMethod(const MethodDescriptorProto& proto,
                    const ServiceDescriptor* parent,
                    MethodDescriptor* result);
@@ -3209,6 +3310,8 @@ class DescriptorBuilder {
                           const EnumValueDescriptorProto& proto);
   void CrossLinkService(ServiceDescriptor* service,
                         const ServiceDescriptorProto& proto);
+  void CrossLinkEvent(EventDescriptor* event,
+                      const EventDescriptorProto& proto);
   void CrossLinkMethod(MethodDescriptor* method,
                        const MethodDescriptorProto& proto);
 
@@ -3361,6 +3464,8 @@ class DescriptorBuilder {
                                 const EnumValueDescriptorProto& proto);
   void ValidateServiceOptions(ServiceDescriptor* service,
                               const ServiceDescriptorProto& proto);
+  void ValidateEventOptions(EventDescriptor* event,
+                            const EventDescriptorProto& proto);
   void ValidateMethodOptions(MethodDescriptor* method,
                              const MethodDescriptorProto& proto);
   void ValidateProto3(FileDescriptor* file,
@@ -3472,7 +3577,7 @@ void DescriptorBuilder::AddNotDefinedError(
   if (possible_undeclared_dependency_ == NULL &&
       undefine_resolved_name_.empty()) {
     AddError(element_name, descriptor, location,
-             "\"" + undefined_symbol + "\" is not defined.");
+             "\"" + undefined_symbol + "\" is not defined!");
   } else {
     if (possible_undeclared_dependency_ != NULL) {
       AddError(element_name, descriptor, location,
@@ -5008,6 +5113,7 @@ void DescriptorBuilder::BuildService(const ServiceDescriptorProto& proto,
   result->file_      = file_;
 
   BUILD_ARRAY(proto, result, method, BuildMethod, result);
+  BUILD_ARRAY(proto, result, event, BuildEvent, result);
 
   // Copy options.
   if (!proto.has_options()) {
@@ -5020,6 +5126,36 @@ void DescriptorBuilder::BuildService(const ServiceDescriptorProto& proto,
             proto, Symbol(result));
 }
 
+void DescriptorBuilder::BuildEvent(const EventDescriptorProto& proto,
+                                   const ServiceDescriptor* parent,
+                                   EventDescriptor* result) {
+  result->name_    = tables_->AllocateString(proto.name());
+  result->service_ = parent;
+
+  string* full_name = tables_->AllocateString(parent->full_name());
+  full_name->append(1, '.');
+  full_name->append(*result->name_);
+  result->full_name_ = full_name;
+
+  ValidateSymbolName(proto.name(), *full_name, proto);
+
+  // These will be filled in when cross-linking.
+  result->event_type_.Init();
+
+  // Copy options.
+  if (!proto.has_options()) {
+    result->options_ = NULL; // Will set to default_instance later.
+  } else{
+    AllocateOptions(proto.options(), result);
+  }
+
+  result->in_server_ = proto.in_server();
+  result->streaming_ = proto.streaming();
+
+  AddSymbol(result->full_name(), parent, result->name(),
+            proto, Symbol(result));
+}
+
 void DescriptorBuilder::BuildMethod(const MethodDescriptorProto& proto,
                                     const ServiceDescriptor* parent,
                                     MethodDescriptor* result) {
@@ -5431,11 +5567,42 @@ void DescriptorBuilder::CrossLinkService(
     service->options_ = &ServiceOptions::default_instance();
   }
 
+  for (int i = 0; i < service->event_count(); i++) {
+    CrossLinkEvent(&service->events_[i], proto.event(i));
+  }
+
   for (int i = 0; i < service->method_count(); i++) {
     CrossLinkMethod(&service->methods_[i], proto.method(i));
   }
 }
 
+void DescriptorBuilder::CrossLinkEvent(
+    EventDescriptor* event, const EventDescriptorProto& proto) {
+  if (event->options_ == NULL) {
+    event->options_ = &EventOptions::default_instance();
+  }
+
+  Symbol event_type =
+    LookupSymbol(proto.event_type(), event->full_name(),
+                 DescriptorPool::PLACEHOLDER_MESSAGE, LOOKUP_ALL,
+                 !pool_->lazily_build_dependencies_);
+  if (event_type.IsNull()) {
+    if (!pool_->lazily_build_dependencies_) {
+      AddNotDefinedError(event->full_name(), proto,
+                         DescriptorPool::ErrorCollector::NUMBER,
+                         proto.event_type());
+    } else {
+      event->event_type_.SetLazy(proto.event_type(), file_);
+    }
+  } else if (event_type.type != Symbol::MESSAGE) {
+    AddError(event->full_name(), proto,
+             DescriptorPool::ErrorCollector::NUMBER,
+             "\"" + proto.event_type() + "\" is not a message type.");
+  } else {
+    event->event_type_.Set(event_type.descriptor);
+  }
+}
+
 void DescriptorBuilder::CrossLinkMethod(
     MethodDescriptor* method, const MethodDescriptorProto& proto) {
   if (method->options_ == NULL) {
@@ -5783,9 +5950,15 @@ void DescriptorBuilder::ValidateServiceOptions(ServiceDescriptor* service,
              "java_generic_sevices to false.");
   }
 
+  VALIDATE_OPTIONS_FROM_ARRAY(service, event, Event);
   VALIDATE_OPTIONS_FROM_ARRAY(service, method, Method);
 }
 
+void DescriptorBuilder::ValidateEventOptions(EventDescriptor* /* event */,
+    const EventDescriptorProto& /* proto */) {
+  // Nothing to do so far.
+}
+
 void DescriptorBuilder::ValidateMethodOptions(MethodDescriptor* /* method */,
     const MethodDescriptorProto& /* proto */) {
   // Nothing to do so far.
@@ -6798,6 +6971,10 @@ const FileDescriptor* FileDescriptor::dependency(int index) const {
   return dependencies_[index];
 }
 
+const Descriptor* EventDescriptor::event_type() const {
+  return event_type_.Get();
+}
+
 const Descriptor* MethodDescriptor::input_type() const {
   return input_type_.Get();
 }
diff --git a/src/google/protobuf/descriptor.h b/src/google/protobuf/descriptor.h
index 7aea734..d6f42fd 100644
--- a/src/google/protobuf/descriptor.h
+++ b/src/google/protobuf/descriptor.h
@@ -80,6 +80,7 @@ class OneofDescriptor;
 class EnumDescriptor;
 class EnumValueDescriptor;
 class ServiceDescriptor;
+class EventDescriptor;
 class MethodDescriptor;
 class FileDescriptor;
 class DescriptorDatabase;
@@ -92,6 +93,7 @@ class OneofDescriptorProto;
 class EnumDescriptorProto;
 class EnumValueDescriptorProto;
 class ServiceDescriptorProto;
+class EventDescriptorProto;
 class MethodDescriptorProto;
 class FileDescriptorProto;
 class MessageOptions;
@@ -100,6 +102,7 @@ class OneofOptions;
 class EnumOptions;
 class EnumValueOptions;
 class ServiceOptions;
+class EventOptions;   
 class MethodOptions;
 class FileOptions;
 class UninterpretedOption;
@@ -472,6 +475,7 @@ class LIBPROTOBUF_EXPORT Descriptor {
   friend class EnumDescriptor;
   friend class FieldDescriptor;
   friend class OneofDescriptor;
+  friend class EventDescriptor;
   friend class MethodDescriptor;
   friend class FileDescriptor;
   GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Descriptor);
@@ -1080,6 +1084,15 @@ class LIBPROTOBUF_EXPORT ServiceDescriptor {
   // message.
   const ServiceOptions& options() const;
 
+  // The number of event this service defines.
+  int event_count() const;
+  // Gets a EventDescriptor by index, where 0 <= index < event_count().
+  // These are returned in the order they were defined in the .proto file.
+  const EventDescriptor* event(int index) const;
+
+  // Look up a EventDescriptor by name
+  const EventDescriptor* FindEventByName(const string& name) const;
+
   // The number of methods this service defines.
   int method_count() const;
   // Gets a MethodDescriptor by index, where 0 <= index < method_count().
@@ -1122,6 +1135,8 @@ class LIBPROTOBUF_EXPORT ServiceDescriptor {
   const string* full_name_;
   const FileDescriptor* file_;
   const ServiceOptions* options_;
+  int event_count_;
+  EventDescriptor* events_;
   int method_count_;
   MethodDescriptor* methods_;
   // IMPORTANT:  If you add a new field, make sure to search for all instances
@@ -1132,10 +1147,81 @@ class LIBPROTOBUF_EXPORT ServiceDescriptor {
   ServiceDescriptor() {}
   friend class DescriptorBuilder;
   friend class FileDescriptor;
+  friend class EventDescriptor;
   friend class MethodDescriptor;
   GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ServiceDescriptor);
 };
 
+class LIBPROTOBUF_EXPORT EventDescriptor {
+ public:
+  // Name of this Event, not including containing scope.
+  const string& name() const;
+  // The fully-qualified name of the method, scope delimited by periods.
+  const string& full_name() const;
+  // Index with in the service's Descriptor
+  int index() const;
+
+  // Gets the service to which this event belongs. Never NULL.
+  const ServiceDescriptor* service() const;
+
+  // Gets the type of protocol message which this event data.
+  const Descriptor* event_type() const;
+
+  // Gets whether the direction flow event.
+  bool in_server() const;
+
+  // Gets whether the streams multiple event.
+  bool streaming() const;
+
+  const EventOptions& options() const;
+
+  // See Desciptor::CopyTo().
+  void CopyTo(EventDescriptorProto* proto) const;
+
+  // See Descriptor::DebugString().
+  string DebugString() const;
+
+  // See Descriptor::DebugStringWithOptions().
+  string DebugStringWithOptions(const DebugStringOptions& options) const;
+
+  // Source Location --------------------------------------------------
+  
+  // Updates |*out_location| to the source location of the complete
+  // extent of this method declaration.  Returns flase and leaves
+  // |*out_location| unchanged iff location information was not available.
+  bool GetSourceLocation(SourceLocation* out_location) const;
+
+ private:
+  typedef EventOptions OptionsType;
+  // Allows access to GetLocationPath for annotations.
+  friend class ::google::protobuf::io::Printer;
+
+  // See Descriptor::DebugString().
+  void DebugString(int depth, string *contents,
+                   const DebugStringOptions& options) const;
+
+  // Walks up the descriptor tree to generate the source location path
+  // to this descriptor from the file root.
+  void GetLocationPath(std::vector<int>* output) const;
+
+  const string* name_;
+  const string* full_name_;
+  const ServiceDescriptor* service_;
+  mutable internal::LazyDescriptor event_type_;
+  const EventOptions* options_;
+  bool in_server_;
+  bool streaming_;
+  // IMPORTANT:  If you add a new field, make sure to search for all instances
+  // of Allocate<EventDescriptor>() and AllocateArray<Eventescriptor>() in
+  // descriptor.cc and update them to initialize the field.
+  
+  // Must be constructed using DescriptorPool.
+  EventDescriptor() {}
+  friend class DescriptorBuilder;
+  friend class ServiceDescriptor;
+  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EventDescriptor);
+};
+
 // Describes an individual service method.  To obtain a MethodDescriptor given
 // a service, first get its ServiceDescriptor, then call
 // ServiceDescriptor::FindMethodByName().  Use DescriptorPool to construct your
@@ -1497,6 +1583,7 @@ class LIBPROTOBUF_EXPORT DescriptorPool {
   const EnumDescriptor* FindEnumTypeByName(const string& name) const;
   const EnumValueDescriptor* FindEnumValueByName(const string& name) const;
   const ServiceDescriptor* FindServiceByName(const string& name) const;
+  const EventDescriptor* FindEventByName(const string& name) const;
   const MethodDescriptor* FindMethodByName(const string& name) const;
 
   // Finds an extension of the given type by number.  The extendee must be
@@ -1852,11 +1939,21 @@ PROTOBUF_DEFINE_OPTIONS_ACCESSOR(EnumValueDescriptor, EnumValueOptions)
 PROTOBUF_DEFINE_STRING_ACCESSOR(ServiceDescriptor, name)
 PROTOBUF_DEFINE_STRING_ACCESSOR(ServiceDescriptor, full_name)
 PROTOBUF_DEFINE_ACCESSOR(ServiceDescriptor, file, const FileDescriptor*)
+PROTOBUF_DEFINE_ACCESSOR(ServiceDescriptor, event_count, int)
+PROTOBUF_DEFINE_ARRAY_ACCESSOR(ServiceDescriptor, event,
+                               const EventDescriptor*)
 PROTOBUF_DEFINE_ACCESSOR(ServiceDescriptor, method_count, int)
 PROTOBUF_DEFINE_ARRAY_ACCESSOR(ServiceDescriptor, method,
                                const MethodDescriptor*)
 PROTOBUF_DEFINE_OPTIONS_ACCESSOR(ServiceDescriptor, ServiceOptions)
 
+PROTOBUF_DEFINE_STRING_ACCESSOR(EventDescriptor, name)
+PROTOBUF_DEFINE_STRING_ACCESSOR(EventDescriptor, full_name)
+PROTOBUF_DEFINE_ACCESSOR(EventDescriptor, service, const ServiceDescriptor*)
+PROTOBUF_DEFINE_OPTIONS_ACCESSOR(EventDescriptor, EventOptions)
+PROTOBUF_DEFINE_ACCESSOR(EventDescriptor, in_server, bool)
+PROTOBUF_DEFINE_ACCESSOR(EventDescriptor, streaming, bool)
+
 PROTOBUF_DEFINE_STRING_ACCESSOR(MethodDescriptor, name)
 PROTOBUF_DEFINE_STRING_ACCESSOR(MethodDescriptor, full_name)
 PROTOBUF_DEFINE_ACCESSOR(MethodDescriptor, service, const ServiceDescriptor*)
@@ -1969,6 +2066,10 @@ inline int ServiceDescriptor::index() const {
   return static_cast<int>(this - file_->services_);
 }
 
+inline int EventDescriptor::index() const {
+  return static_cast<int>(this - service_->events_);
+}
+
 inline int MethodDescriptor::index() const {
   return static_cast<int>(this - service_->methods_);
 }
 
diff --git a/src/google/protobuf/descriptor.proto b/src/google/protobuf/descriptor.proto
index c7fbaaf..b93aa51 100644
--- a/src/google/protobuf/descriptor.proto
+++ b/src/google/protobuf/descriptor.proto
@@ -229,10 +229,23 @@ message EnumValueDescriptorProto {
 message ServiceDescriptorProto {
   optional string name = 1;
   repeated MethodDescriptorProto method = 2;
+  repeated EventDescriptorProto event = 3;
 
-  optional ServiceOptions options = 3;
+  optional ServiceOptions options = 4;
 }
 
+message EventDescriptorProto {
+    optional string name = 1;
+
+    optional string event_type = 2;
+
+    optional bool in_server = 3 [default=true];
+
+    optional bool streaming = 4 [default=false];
+
+    optional EventOptions options = 5;
+};
+
 // Describes a method of a service.
 message MethodDescriptorProto {
   optional string name = 1;
@@ -613,6 +626,24 @@ message ServiceOptions {
   extensions 1000 to max;
 }
 
+message EventOptions {
+
+  // Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
+  //   framework.  We apologize for hoarding these numbers to ourselves, but
+  //   we were already using them long before we decided to release Protocol
+  //   Buffers.
+
+  // Is this event deprecated?
+  // Depending on the target platform, this can emit Deprecated annotations
+  // for the event, or it will be completely ignored; in the very least,
+  // this is a formalization for deprecating event.
+
+  optional bool deprecated = 33 [default=false];
+
+  repeated UninterpretedOption uninterpreted_option = 999;
+  extensions 1000 to max;
+}
+
 message MethodOptions {
 
   // Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
